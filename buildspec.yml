version: 0.2
phases:
  install:
    commands:
      - echo install step...
      - echo "Installing Terraform"
      #- curl -o terraform.zip https://releases.hashicorp.com/terraform/1.1.0/terraform_1.1.0_linux_amd64.zip
      - curl -o terraform.zip https://releases.hashicorp.com/terraform/1.8.3/terraform_1.8.3_linux_386.zip
      - unzip terraform.zip
      - chmod +x terraform
      - mv terraform /usr/local/bin/
      - echo Installing app dependencies...
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
      - source ~/.bashrc
      - echo 'Check kubectl version'
      - kubectl version --short --client
  pre_build:
    commands:
      - echo logging in to AWS ECR...
      - aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 962804699607.dkr.ecr.us-west-2.amazonaws.com
      - echo Logging into Amazon EKS...
      - aws eks --region us-west-2 update-kubeconfig --name cicd-demo - echo check config
      - kubectl config view --minify
      - echo check kubectl access
      - kubectl get svc
      - echo logging in to AWS ECR...
      - $(aws ecr get-login --no-include-email --region us-west-2)
  build:
    commands:
      - echo "Building infrastructure with Terraform"
      - terraform init
      - terraform state list
      - terraform show
      - terraform apply --auto-approve
      - echo build Docker image on `date`
      - docker build -t group1repo:latest .
      - docker tag group1repo:latest 962804699607.dkr.ecr.us-west-2.amazonaws.com/group1repo:latest
  post_build:
    commands:
      - echo build Docker image complete `date`
      - echo push latest Docker images to ECR...
      - docker push 962804699607.dkr.ecr.us-west-2.amazonaws.com/group1repo:latest
      - docker tag group1repo:latest 962804699607.dkr.ecr.us-west-2.amazonaws.com/group1repo:latest
      - kubectl apply -f deployment.yaml
      - kubectl apply -f service.yaml
      - kubectl rollout restart -f deployment.yaml
      - kubectl get svc --all-namespaces
      #- printf '[{"name":"group1-cap2-cluster","imageUri":"962804699607.dkr.ecr.us-west-2.amazonaws.com/group1repo:latest"}]' > imagedefinitions.json
#artifacts:
#  files: imagedefinitions.json